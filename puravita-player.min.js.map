{"version":3,"sources":["webpack://puravita-player/./src/app/puravita-utils.ts","webpack://puravita-player/webpack/bootstrap","webpack://puravita-player/webpack/runtime/define property getters","webpack://puravita-player/webpack/runtime/hasOwnProperty shorthand","webpack://puravita-player/webpack/runtime/make namespace object","webpack://puravita-player/./src/app/puravita-player.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2BAA2B,2BAA2B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,yBAAymN;;;;;;;UCvNnN;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,wCAAwC,yCAAyC;WACjF;WACA;WACA,E;;;;;WCPA,wF;;;;;WCAA;WACA;WACA;WACA,sDAAsD,kBAAkB;WACxE;WACA,+CAA+C,cAAc;WAC7D,E;;;;;;;;;;;;ACNoN;AACpN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,yDAAQ;AACZ,IAAI,oEAAmB;AACvB,IAAI,yDAAQ;AACZ,IAAI,4EAA2B;AAC/B,IAAI,0DAAS;AACb,IAAI,0DAAS;AACb,IAAI,uDAAM;AACV,IAAI,8DAAa;AACjB,IAAI,mEAAkB;AACtB,IAAI,4DAAW;AACf,IAAI,mEAAkB;AACtB,IAAI,wDAAO;AACX,QAAQ,0DAAS;AACjB,KAAK;AACL,CAAC","file":"puravita-player.min.js","sourcesContent":["var inputClose = function (input, inputs) {\n    inputs.forEach(function (v) {\n        if (v != input) {\n            v.checked = false;\n        }\n    });\n};\nvar controlInputsToggle = function (player) {\n    var inputs = player.querySelectorAll('input[type=\"checkbox\"]');\n    var labels = player.querySelectorAll('label');\n    document.addEventListener('click', function () {\n        inputs.forEach(function (v) {\n            v.checked = false;\n        });\n    });\n    labels.forEach(function (label) {\n        label.addEventListener('click', function (e) {\n            e.cancelBubble = true;\n            e.stopPropagation();\n        });\n    });\n    inputs.forEach(function (input) {\n        input.addEventListener('click', function (e) {\n            e.cancelBubble = true;\n            e.stopPropagation();\n            if (input.checked && !input.classList.contains('js-inative')) {\n                inputClose(input, inputs);\n            }\n        });\n    });\n};\nvar playPause = function (video, button) {\n    video.addEventListener('pause', function () {\n        video.classList.remove('puravita-play');\n    });\n    video.addEventListener('ended', function () {\n        video.classList.remove('puravita-play');\n    });\n    video.addEventListener('play', function () {\n        video.classList.add('puravita-play');\n    });\n    button.addEventListener('click', function () {\n        if (video.classList.contains('puravita-play')) {\n            video.pause();\n        }\n        else {\n            video.play();\n        }\n    }, false);\n};\nvar setProgressBufferPercentage = function (video, progressbarbuffer) {\n    video.addEventListener('progress', function () {\n        if (video.duration > 0) {\n            for (var i = 0; i < video.buffered.length; i++) {\n                if (video.buffered.start(video.buffered.length - 1 - i) < video.currentTime) {\n                    progressbarbuffer.style.width = (video.buffered.end(video.buffered.length - 1 - i) / video.duration) * 100 + \"%\";\n                    break;\n                }\n            }\n        }\n    }, false);\n};\nvar setProgressPercentage = function (progressbar, video, currentTime) {\n    var percentage = currentTime / (video.duration * 0.01);\n    var width = percentage.toFixed(6) + \"%\";\n    progressbar.style.width = width;\n};\nvar progress = function (video, progressbar, time) {\n    var timeInterval = false;\n    video.addEventListener('play', function () {\n        timeInterval = setInterval(function () {\n            setProgressPercentage(progressbar, video, video.currentTime);\n            countTime(time, video.currentTime, video.duration);\n        });\n    });\n    video.addEventListener('pause', function () {\n        if (timeInterval) {\n            clearInterval(timeInterval);\n            timeInterval = false;\n        }\n    });\n    video.addEventListener('ended', function () {\n        if (timeInterval) {\n            clearInterval(timeInterval);\n            timeInterval = false;\n        }\n    });\n};\nvar countTime = function (time, currentTime, durationTime) {\n    if (!durationTime)\n        return;\n    var timenumber = durationTime - currentTime;\n    var sec_num = parseInt(timenumber.toString(), 10);\n    var hours = Math.floor(sec_num / 3600);\n    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n    var seconds = sec_num - (hours * 3600) - (minutes * 60);\n    if (hours < 10) {\n        hours = \"0\" + hours;\n    }\n    if (minutes < 10) {\n        minutes = \"0\" + minutes;\n    }\n    if (seconds < 10) {\n        seconds = \"0\" + seconds;\n    }\n    time.innerText = hours + \":\" + minutes + \":\" + seconds;\n};\nvar canPlay = function (video, callback) {\n    if (callback === void 0) { callback = function () { }; }\n    video.addEventListener('canplay', function () {\n        callback();\n    });\n};\nvar volume = function (video, input) {\n    video.volume = parseFloat(input.value);\n    input.addEventListener('change', function () {\n        video.volume = parseFloat(input.value);\n    });\n};\nvar playrate = function (label, list, video) {\n    list.querySelectorAll('li').forEach(function (li) {\n        li.querySelector('label').addEventListener('click', function (e) {\n            var value = parseFloat(e.target.getAttribute('data-value'));\n            video.playbackRate = value;\n            label.innerText = e.target.getAttribute('data-value') + \"x\";\n        });\n    });\n};\nvar sidebarToggle = function (video, button, sidebar, controller) {\n    var isShow = false;\n    button.addEventListener('click', function () {\n        if (isShow) {\n            isShow = false;\n            sidebar.classList.remove('puravita-chat-sidebar-show');\n            controller.classList.remove('puravita-controller-sidebar');\n        }\n        else {\n            isShow = true;\n            video.pause();\n            sidebar.classList.add('puravita-chat-sidebar-show');\n            controller.classList.add('puravita-controller-sidebar');\n        }\n    }, false);\n};\nvar progressInteration = function (video, progressel, progressbar, time) {\n    var mousemove = false;\n    progressel.addEventListener('mouseout', function () {\n        mousemove = false;\n        progressel.style.zIndex = '4';\n    });\n    progressel.addEventListener('mousedown', function () {\n        mousemove = true;\n        progressel.style.zIndex = '9';\n    });\n    progressel.addEventListener('mouseup', function () {\n        mousemove = false;\n        progressel.style.zIndex = '4';\n    });\n    progressel.addEventListener('mousemove', function (e) {\n        if (!mousemove)\n            return;\n        video.pause();\n        var width = progressel.getClientRects()[0].width;\n        var layerX = e.layerX;\n        var percentage = layerX / (width * 0.01);\n        var duration = video.duration;\n        var minuteSet = (duration * 0.01) * percentage;\n        setProgressPercentage(progressbar, video, minuteSet);\n        video.currentTime = minuteSet;\n        countTime(time, video.currentTime, duration);\n    });\n    progressel.addEventListener('click', function (e) {\n        var width = progressel.getClientRects()[0].width;\n        var layerX = e.layerX;\n        var percentage = layerX / (width * 0.01);\n        var duration = video.duration;\n        var minuteSet = (duration * 0.01) * percentage;\n        setProgressPercentage(progressbar, video, minuteSet);\n        video.currentTime = minuteSet;\n        countTime(time, video.currentTime, duration);\n    });\n};\nvar blurSvgShow = function (video, svg, theCanvas) {\n    var cropFrame = function () {\n        theCanvas.width = video.getClientRects()[0].width;\n        theCanvas.height = video.getClientRects()[0].height;\n        var ctx = theCanvas.getContext('2d');\n        ctx.drawImage(video, 0, 0, theCanvas.width, theCanvas.height);\n        var image = svg.querySelector('image');\n        image.setAttribute('xlink:href', theCanvas.toDataURL());\n    };\n    video.addEventListener('pause', function () {\n        cropFrame();\n    });\n    video.addEventListener('play', function () {\n        cropFrame();\n    });\n    cropFrame();\n};\nvar showSubtitleConfig = function (video, buttonToggleShow, boxTarget) {\n    buttonToggleShow.addEventListener('click', function () {\n        video.pause();\n        if (buttonToggleShow.classList.contains('is-active')) {\n            buttonToggleShow.classList.remove('is-active');\n            // boxTarget.style.visibility = 'hidden';\n            boxTarget.style.zIndex = '4';\n            boxTarget.classList.add('puravita-canvas_animation_hide');\n        }\n        else {\n            buttonToggleShow.classList.add('is-active');\n            boxTarget.style.zIndex = '9';\n            boxTarget.classList.remove('puravita-canvas_animation_hide');\n        }\n    });\n};\nexport { playPause, progress, setProgressPercentage, setProgressBufferPercentage, countTime, canPlay, volume, controlInputsToggle, playrate, sidebarToggle, progressInteration, blurSvgShow, showSubtitleConfig, };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { playPause, progress, setProgressBufferPercentage, countTime, canPlay, volume, controlInputsToggle, playrate, sidebarToggle, progressInteration, blurSvgShow, showSubtitleConfig, } from './puravita-utils';\nwindow.addEventListener('load', function () {\n    var player = document.getElementById('puravita-player');\n    var video = document.getElementById('video-puravita');\n    var buttonPlay = document.getElementById('play-puravita');\n    var progressel = document.getElementById('puravita-progress');\n    var progressbar = document.getElementById('puravita-progressbar');\n    var progressbuffer = document.getElementById('puravita-progressbuffer');\n    var timenumber = document.getElementById('puravita-time');\n    var volumeinput = document.getElementById('puravita-volume');\n    var playratelist = document.getElementById('puravita-rate-list');\n    var playratelabel = document.getElementById('puravita-rate-label');\n    var sidebarbutton = document.getElementById('puravita-sidebar-button');\n    var sidebar = document.getElementById('puravita-sidebar');\n    var controller = document.getElementById('puravita-controller');\n    var svgBlurBox = document.getElementById('puravita-box-blur');\n    var svgBlurBoxSVG = document.getElementById('puravita-box-blur-svg');\n    var subtitleButton = document.getElementById('button-subtitle-trigger');\n    var theCanvas = document.getElementById('the-canvas');\n    playrate(playratelabel, playratelist, video);\n    controlInputsToggle(player);\n    progress(video, progressbar, timenumber);\n    setProgressBufferPercentage(video, progressbuffer);\n    playPause(video, buttonPlay);\n    countTime(timenumber, 0, video.duration);\n    volume(video, volumeinput);\n    sidebarToggle(video, sidebarbutton, sidebar, controller);\n    progressInteration(video, progressel, progressbar, timenumber);\n    blurSvgShow(video, svgBlurBoxSVG, theCanvas);\n    showSubtitleConfig(video, subtitleButton, svgBlurBox);\n    canPlay(video, function () {\n        countTime(timenumber, video.currentTime, video.duration);\n    });\n}, false);\n"],"sourceRoot":""}